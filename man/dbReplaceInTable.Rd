% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table-replace.R
\name{dbReplaceInTable}
\alias{dbReplaceInTable}
\title{insert of replacement rows into a table}
\usage{
dbReplaceInTable(conn, name, value, ..., row.names = NULL)
}
\arguments{
\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[=dbConnect]{dbConnect()}}.}

\item{name}{Name of the table, escaped with [dbQuoteIdentifier()].}

\item{value}{A data frame of values. The column names must be consistent
with those in the target table in the database.}

\item{...}{Other arguments used by individual methods.}

\item{row.names}{Must be `NULL`.}
}
\description{
The `dbReplaceInTable()` method assumes that the table has been created
beforehand, e.g. with [dbCreateTable()].
The default implementation calls [sqlReplaceInTableTemplate()] and then
[dbExecute()] with the `param` argument. Backends compliant to
ANSI SQL 99 which use `?` as a placeholder for prepard queries don't need
to override it. Backends with a different SQL syntax which use `?`
as a placeholder for prepared queries can override [sqlReplaceInTable()].
Other backends (with different placeholders or with entirely different
ways to create tables) need to override the `dbReplaceInTable()` method.
}
\details{
The `row.names` argument is not supported by this method.
Process the values with [sqlRownamesToColumn()] before calling this method.
}
\examples{
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbCreateTable(con, "iris", iris)
dbUpdateTable(con, "iris", iris)
dbReadTable(con, "iris")
dbDisconnect(con)
}
\seealso{
Other DBIConnection generics: \code{\link{dbUpdateTable}}
}
\concept{DBIConnection generics}
