% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table-replace.R
\name{sqlReplaceInTable}
\alias{sqlReplaceInTable}
\alias{sqlReplaceInTableTemplate}
\title{Compose query to update rows in a table}
\usage{
sqlReplaceInTable(con, table, values, row.names = NA, ...)

sqlReplaceInTableTemplate(con, table, values, row.names = NA,
  prefix = "?", ..., pattern = "")
}
\arguments{
\item{con}{A database connection.}

\item{table}{Name of the table. Escaped with
\code{\link[=dbQuoteIdentifier]{dbQuoteIdentifier()}}.}

\item{values}{A data frame. Factors will be converted to character vectors.
Character vectors will be escaped with [dbQuoteString()].}

\item{row.names}{Either \code{TRUE}, \code{FALSE}, \code{NA} or a string.

If \code{TRUE}, always translate row names to a column called "row_names".
If \code{FALSE}, never translate row names. If \code{NA}, translate
rownames only if they're a character vector.

A string is equivalent to \code{TRUE}, but allows you to override the
default name.

For backward compatibility, \code{NULL} is equivalent to \code{FALSE}.}

\item{...}{Other arguments used by individual methods.}

\item{prefix}{Parameter prefix to use for placeholders.}

\item{pattern}{Parameter pattern to use for placeholders:
- `""`: no pattern
- `"1"`: position
- anything else: field name}
}
\description{
`sqlReplaceInTable()` generates a single SQL string that inserts a
data frame into an existing table. `sqlReplaceTableTemplate()` generates
a template suitable for use with [dbBind()].
The default methods are MariaDB, MySQL compliant.
These methods are mostly useful for backend implementers.
}
\details{
The `row.names` argument must be passed explicitly in order to avoid
a compatibility warning.  The default will be changed in a later release.
}
\examples{
sqlReplaceInTable(ANSI(), "iris", head(iris))

sqlReplaceInTable(ANSI(), "mtcars", head(mtcars))
sqlReplaceTable(ANSI(), "mtcars", head(mtcars), row.names = FALSE)
sqlAppendTableTemplate(ANSI(), "iris", iris)

sqlAppendTableTemplate(ANSI(), "mtcars", mtcars)
sqlAppendTableTemplate(ANSI(), "mtcars", mtcars, row.names = FALSE)
}
\seealso{
Other SQL generation: \code{\link{sqlAddIndex}},
  \code{\link{sqlAlterTableWithPrimaryKey}},
  \code{\link{sqlDeleteAllRecords}},
  \code{\link{sqlOnClause}}, \code{\link{sqlSetClause}},
  \code{\link{sqlUpdateTable}}
}
\concept{SQL generation}
